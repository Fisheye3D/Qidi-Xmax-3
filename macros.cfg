
##############################################################################
                     ##     My add'd Macros     ##
##############################################################################

##############################################################################
                    ## Print Start Macros ##
##############################################################################
[gcode_macro CANCEL_PRINT]
rename_existing: BASE_CANCEL_PRINT
gcode:
    {% if (printer.gcode_move.position.z) < 200 %}       ; check that zhop doesn't exceed z max
        G1 Z200 F600                                         
    {% endif %}

    G1  X0 Y0 F12000

    SDCARD_RESET_FILE
    PRINT_END
    BASE_CANCEL_PRINT


[gcode_macro PRINT_START_PLA]
description: Start G-Code
gcode:
  {% set BED_TEMP = params.BED_TEMP|default(60)|float %}
  {% set EXTRUDER_TEMP = params.EXTRUDER_TEMP|default(210)|float %}
  G28
  G0 Z50 F600
  M140 S{BED_TEMP}
  M190 S{BED_TEMP}
  G28 Z 
  G29 #need for Kamp or else default
  #BED_MESH_PROFILE LOAD=default   
  SET_TEMPERATURE_FAN_TARGET temperature_fan=chamber target=45
  #SET_HEATER_TEMPERATURE HEATER=hot TARGET=0
  #TEMPERATURE_WAIT SENSOR=hot
  G0 X4 Y5 Z50 F6000
  M109 S{EXTRUDER_TEMP}
  M82
  G0 Z0.3 F600
  G92 E-36.45
  G1 Y120 E-27.45 F3000
  G1 X6 E-27.30
  G1 Y5 E-18.30
  G1 X8 E-18.15
  G1 Y120 E-9.15
  G1 X10 E-9
  G1 Y5 E0


[gcode_macro PRINT_START_TEST]
gcode:
    G28
    M141 S0
    G0 Z50 F600
    M190 S[first_layer_bed_temperature]
    G28 Z
    G29
    SET_TEMPERATURE_FAN_TARGET temperature_fan=chamber target=45
    G0 X0 Y0 Z50 F6000
    M109 S[first_layer_temperature]
    M83
    G0 X{max((min(print_bed_max[0], first_layer_print_min[0] + 80) - 85),0)} Y{max((min(print_bed_max[1], first_layer_print_min[1] + 80) - 85),0)} Z5 F6000
    G0 Z0.2 F600
    G1 E3 F1800
    G1 X{(min(print_bed_max[0], first_layer_print_min[0] + 80))} E{85 * 0.04} F3000
    G1 Y{max((min(print_bed_max[1], first_layer_print_min[1] + 80) - 85),0) + 2} E{2 * 0.04} F3000
    G1 X{max((min(print_bed_max[0], first_layer_print_min[0] + 80) - 85),0)} E{85 * 0.04} F3000
    G1 Y{max((min(print_bed_max[1], first_layer_print_min[1] + 80) - 85),0) + 85} E{83 * 0.04} F3000
    G1 X{max((min(print_bed_max[0], first_layer_print_min[0] + 80) - 85),0) + 2} E{2 * 0.04} F3000
    G1 Y{max((min(print_bed_max[1], first_layer_print_min[1] + 80) - 85),0) + 5} E{80 * 0.04} F3000
  
 
[gcode_macro PRINT_END]
gcode:
    M106 P2 S0
    M106 P0 S0
    M106 P3 S0  #关闭活性炭风扇
    
    M104 S0
    M140 S0
    M141 S0

    M220 S100
    M221 S100
    SET_TEMPERATURE_FAN_TARGET temperature_fan=chamber target=0
    
    G1 E-3 F1800
    G91
    G0 Z5 F600
    G90
    G0 X0 Y0 F12000
    #{if max_layer_z < max_print_height / 2}G1 Z{max_print_height / 2 + 10} F600{else}G1 Z{min(max_print_height, max_layer_z + 10)}{endif}
    
  

    SET_IDLE_TIMEOUT TIMEOUT={printer.configfile.settings.idle_timeout.timeout} ; set timeout back to configured value
    CLEAR_PAUSE
    HOT_CALIBRATE_END

    M84
    #SET_STEPPER_ENABLE STEPPER=stepper_x enable=0
	#SET_STEPPER_ENABLE STEPPER=stepper_y enable=0
	#SET_STEPPER_ENABLE STEPPER=stepper_z enable=1
	#SET_STEPPER_ENABLE STEPPER=extruder enable=0

    BED_MESH_CLEAR      #恢复调平数据
    BED_MESH_PROFILE LOAD=default
    G31
    BEEP I=2 DUR=500


[gcode_macro M84]
rename_existing:M84.1
gcode:
	SET_STEPPER_ENABLE STEPPER=stepper_x enable=0
	SET_STEPPER_ENABLE STEPPER=stepper_y enable=0
	SET_STEPPER_ENABLE STEPPER=stepper_z enable=0
	SET_STEPPER_ENABLE STEPPER=extruder enable=0
	SET_KINEMATIC_POSITION

########################################
#   CHamber heater/exhaust   #
#########################################

[gcode_macro M141]
gcode:
    #SET_TEMPERATURE_FAN_TARGET temperature_fan=fan3 target={s}
    SET_HEATER_TEMPERATURE HEATER=hot TARGET={params.S}
    #TEMPERATURE_WAIT SENSOR=hot

########################################
#   Pressure advance/square corner   #
#########################################


[gcode_macro M900_Pressure_advance] #Qidi Gcode for PA
gcode:
  gcode:
    {% if params.K is defined %} 
          SET_PRESSURE_ADVANCE ADVANCE={params.K}
    {% endif %}  
    {% if params.T is defined %}    
       SET_PRESSURE_ADVANCE SMOOTH_TIME={params.T}
    {% endif %} 


[gcode_macro M205_Square_corner_velocity]
gcode:
  {% if 'X' in params %}
    SET_VELOCITY_LIMIT SQUARE_CORNER_VELOCITY={params.X}
  {% elif 'Y' in params %}
    SET_VELOCITY_LIMIT SQUARE_CORNER_VELOCITY={params.Y}
  {% endif %}


[gcode_macro M204] #desuu macro 
rename_existing: M204.1
gcode:
  #{% set f = printer.configfile.settings.printer.max_accel_to_decel %} #DEFAULT 0.85 = 85 PERCENT OF SET ACCELERATION VIA SLICER FOR ACCEL TO DECEL 
  {% if 'S' in params %}
  {% set s = params.S|float %} #
  SET_VELOCITY_LIMIT ACCEL={s} #ACCEL_TO_DECEL={f}
  {% else %}
  {% if 'P' in params %}
  {% set p = params.P|float %}
  {% if 'T' in params %}
  {% set t = params.T|float %}
  {% if p < t %}
  SET_VELOCITY_LIMIT ACCEL={p} #ACCEL_TO_DECEL={f}
  {% else %}
  SET_VELOCITY_LIMIT ACCEL={t} #ACCEL_TO_DECEL={f}
  {% endif %}
  {% else %}
  SET_VELOCITY_LIMIT ACCEL={p} #ACCEL_TO_DECEL={f}
  {% endif %}
  {% elif 'T' in params %}
  {% set t = params.T|float %}
  SET_VELOCITY_LIMIT ACCEL={t} #ACCEL_TO_DECEL={f}
    {% endif %}
  {% endif %}

##################################################################
###  Automatic ressonacne test and belt test  ssh in for graph ###
#################################################################

[gcode_macro RESONANCES_TEST]
description: Run input shaper test
gcode:
  {% set user = printer['gcode_macro _USER_VARIABLE'] %}
  _CG28                                                 ; home if needed
  TURN_OFF_HEATERS                                      ; turn off heaters
  M107                                                  ; turn off fan
  {% if user.hw.chamber.fan %} M141 {% endif %}         ; exhaust fan off
  {% if user.hw.filter.ena %} _SET_FILTER {% endif %}   ; filter off
  _PRINT_AR T="INPUT SHAPER: Noise values, check if sensor is installed"
  MEASURE_AXES_NOISE                                    ; get noise value in log
  _PRINT_AR T="INPUT SHAPER: Resonance Tests starting"
  _PRINT_AR T="INPUT SHAPER: Mesasure X axis"
  TEST_RESONANCES AXIS=X                                ; measure X
  _PRINT_AR T="INPUT SHAPER: Mesasure Y axis"
  TEST_RESONANCES AXIS=Y                                ; measure Y
  _PRINT_AR T="INPUT SHAPER: Resonance Tests done"
  _PRINT_AR T="INPUT SHAPER: Generate graph in backround"
  RUN_SHELL_COMMAND CMD=plot_graph PARAMS=SHAPER

[gcode_macro BELT_TEST]
description: Run resonance test to analyze belts
gcode:
  {% set user = printer['gcode_macro _USER_VARIABLE'] %}
  _CG28                                                 ; home if needed
  TURN_OFF_HEATERS                                      ; turn off heaters
  M107                                                  ; turn off fan
  {% if user.hw.chamber.fan %} M141 {% endif %}         ; exhaust fan off
  {% if user.hw.filter.ena %} _SET_FILTER {% endif %}   ; filter off
  _PRINT_AR T="BELT TEST: Noise values, check if sensor is installed"
  MEASURE_AXES_NOISE                                    ; get noise value in log
  _PRINT_AR T="BELT TEST: Resonance Tests starting ..."
  _PRINT_AR T="BELT TEST: Mesasure B belt"
  TEST_RESONANCES AXIS=1,1 OUTPUT=raw_data NAME=b
  _PRINT_AR T="BELT TEST: Mesasure A belt"
  TEST_RESONANCES AXIS=1,-1 OUTPUT=raw_data NAME=a
  _PRINT_AR T="BELT TEST: Resonance Tests done"
  _PRINT_AR T="BELT TEST: Generate graph in backround"
  RUN_SHELL_COMMAND CMD=plot_graph PARAMS=BELT

[gcode_shell_command plot_graph]
command: bash /home/pi/klipper_config/script/plot_graph.sh
timeout: 60.0
verbose: True

##################################
#  Firmware retraction #
##################################


[firmware_retraction]
retract_length: 1 ; length of filament (in mm) at G10/G11
unretract_extra_length: 0 ; length of additional filament (in mm) at G11
retract_speed: 30
unretract_speed: 30

##################################
# To disable X/Y motor bed adjust #
###################################
[gcode_macro disable_X_Y_bed_screw_adjust]
description: disable X/Y motors to adjust screws on bed for flatness
gcode:
  SET_STEPPER_ENABLE STEPPER=extruder ENABLE=0
  SET_STEPPER_ENABLE STEPPER=stepper_x ENABLE=0
  SET_STEPPER_ENABLE STEPPER=stepper_y ENABLE=0


##################################
########PID TUNE################
###############################


# PID tune bed to 65C
[gcode_macro PID_BED_65]
description: Start Bed PID 
gcode:
  {% if printer.idle_timeout.state == "Printing" %}
  RESPOND TYPE=error MSG="This macro cannot be used while printing!"
  {% else %}
  G28
  M106
  G1 Z50 F1500
  RESPOND MSG="Bed PID in progress..."
  PID_CALIBRATE HEATER=heater_bed TARGET={params.TEMP|default(65)}
  G28
  G1 Z50
  SAVE_CONFIG
  {% endif %}

# PID tune hotend to 220C
[gcode_macro PID_HOTEND_220]
description: Start Hotend PID
gcode:
  {% if printer.idle_timeout.state == "Printing" %}
  RESPOND TYPE=error MSG="This macro cannot be used while printing!"
  {% else %}
  G28
  M106
  G1 Z50 F1500
  RESPOND MSG="Hotend PID in progress..."
  PID_CALIBRATE HEATER=extruder TARGET={params.TEMP|default(220)}
  G28
  G1 Z50
  SAVE_CONFIG
  {% endif %}



#############################
# Load/Unload Pause/resume  #
#############################

[gcode_macro UNLOAD_FILAMENT]
description: Unloads the filament. Note: be careful with PETG, make sure you inspect the tip of your filament before reloading to avoid jams.
gcode:
  SAVE_GCODE_STATE NAME=unload_state
  G91
  {% if params.TEMP is defined or printer.extruder.can_extrude|lower == 'false' %}
    M117 Heating...
    # Heat up hotend to provided temp or 220 as default as that should work OK with most filaments.
    M104 S{params.TEMP|default(220, true)}
    TEMPERATURE_WAIT SENSOR=extruder MINIMUM={params.TEMP|default(220, true)}
  {% endif %}
  M117 Unloading filament...
  # Extract filament to cold end area 
  G0 E-5 F3600
  # Wait for three seconds
  G4 P3000
  # Push back the filament to smash any stringing 
  G0 E5 F3600
  # Extract back fast in to the cold zone 
  G0 E-15 F3600
  # Continue extraction slowly, allow the filament time to cool solid before it reaches the gears       
  G0 E-130 F300
  M117 Filament unloaded!
  RESPOND MSG="Filament unloaded! Please inspect the tip of the filament before reloading."
  RESTORE_GCODE_STATE NAME=unload_state


[gcode_macro LOAD_FILAMENT]
description: Loads new filament. Note: be careful with PETG, make sure you inspect the tip of your filament before loading to avoid jams.
gcode:
  SAVE_GCODE_STATE NAME=load_state
  G91
  # Heat up hotend to provided temp or 220 as default as that should work OK with most filaments.
  {% if params.TEMP is defined or printer.extruder.can_extrude|lower == 'false' %}
    M117 Heating...
    M104 S{params.TEMP|default(220, true)}
    TEMPERATURE_WAIT SENSOR=extruder MINIMUM={params.TEMP|default(220, true)}
  {% endif %}
  M117 Loading filament...
  # Load the filament into the hotend area.
  G0 E100 F600
  # Wait a secod
  G4 P1000
  # Purge
  G0 E40 F100
  # Wait for purge to complete
  M400e
  M117 Filament loaded!
  RESPOND MSG="Filament loaded!"
  RESTORE_GCODE_STATE NAME=load_state




[gcode_macro CANCEL_PRINT]
rename_existing: BASE_CANCEL_PRINT
gcode:
    {% if (printer.gcode_move.position.z) < 200 %}       ; check that zhop doesn't exceed z max
        G1 Z200 F600                                         
    {% endif %}

    G1  X0 Y0 F12000

    SDCARD_RESET_FILE
    PRINT_END
    BASE_CANCEL_PRINT
    
   
[gcode_macro M600]
gcode:
  {% set X = params.X|default(printer.configfile.config["stepper_x"]["position_endstop"]|string)|int %}
  {% set Y = params.Y|default(printer.configfile.config["stepper_y"]["position_endstop"]|string)|int %}
  {% set Z = params.Z|default(10)|int %}
  {% set E = params.E|default(-20)|int %}
  {% set tool = params.tool|default(0)|int %}

        SAVE_GCODE_STATE NAME=M600_state
        PAUSE
        G91
        G1 E-5 F4000
        G1 Z{Z}
        G90
        G1 X{X} Y{Y} F3000        ;park position
        G0 E10 F500                ;extrude filament to get better blob on end
        G0 E{E} F600             ;retract additional filament to move out of melt zone
        G92 E0
        SET_FILAMENT_SENSOR SENSOR=e{TOOL}_runout ENABLE=0

[gcode_macro SWAP_RESUME] 
gcode:
    RESTORE_GCODE_STATE NAME=M600_state
    SET_FILAMENT_SENSOR SENSOR=e0_runout ENABLE=1
    SET_FILAMENT_SENSOR SENSOR=e1_runout ENABLE=1


[gcode_macro PAUSE]
rename_existing: BASE_PAUSE
gcode:
    -- Parameters
    {% set z = params.Z|default(50)|int %}                                                   ; z hop amount
    
    {% if printer['pause_resume'].is_paused|int == 0 %}     
       SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=zhop VALUE={z}                              ; set z hop variable for reference in resume macro
        SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=etemp VALUE={printer['extruder'].target}    ; set hotend temp variable for reference in resume macro
                                
#      -- SET_FILAMENT_SENSOR SENSOR=fila ENABLE=0                                             ; disable filament sensor       
        SAVE_GCODE_STATE NAME=PAUSE                                                          ; save current print position for resume                
        BASE_PAUSE                                                                           ; pause print
        {% if (printer.gcode_move.position.z + z) < printer.toolhead.axis_maximum.z %}       ; check that zhop doesn't exceed z max
            G91                                                                              ; relative positioning
            G1 Z{z} F600                                                                     ; raise Z up by z hop amount
        {% else %}
#        --    { action_respond_info("Pause zhop exceeds maximum Z height.") }                  ; if z max is exceeded, show message and set zhop value for resume to 0
            SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=zhop VALUE=0
        {% endif %}
        SAVE_GCODE_STATE NAME=PAUSEPARK2
        G90                                                                                  ; absolute positioning
        G1 X{printer.toolhead.axis_maximum.x/2} Y{printer.toolhead.axis_maximum.y} F6000   ; park toolhead at front center
        SAVE_GCODE_STATE NAME=PAUSEPARK                                                      ; save parked position in case toolhead is moved during the pause (otherwise the return zhop can error) 
        M104 S0                                                                              ; turn off hotend
        SET_IDLE_TIMEOUT TIMEOUT=43200                                                       ; set timeout to 12 hours
        SET_STEPPER_ENABLE STEPPER=extruder enable=0
    {% endif %}


[gcode_macro RESUME]
rename_existing: BASE_RESUME
variable_zhop: 0
variable_etemp: 0
gcode:
     Parameters
    {% set e = params.E|default(2.5)|int %}                                          ; hotend prime amount (in mm)
    
    {% if printer['pause_resume'].is_paused|int == 1 %}
#        SET_FILAMENT_SENSOR SENSOR=fila ENABLE=1                          ; enable filament sensor
        #--INITIAL_RGB                                                                    ; reset LCD color
        SET_IDLE_TIMEOUT TIMEOUT={printer.configfile.settings.idle_timeout.timeout}  ; set timeout back to configured value
        {% if etemp > 0 %}
            M109 S{etemp|int}                                                        ; wait for hotend to heat back up
        {% endif %}
        RESTORE_GCODE_STATE NAME=PAUSEPARK MOVE=1 MOVE_SPEED=150                     ; go back to parked position in case toolhead was moved during pause (otherwise the return zhop can error)  
        G91                                                                          ; relative positioning
        M83                                                                          ; relative extruder positioning
        {% if printer[printer.toolhead.extruder].temperature >= printer.configfile.settings.extruder.min_extrude_temp %}                                                
            G1  E{e} F900                                                ; prime nozzle by E, lower Z back down
  #      {% else %}                      
   #         G1 Z{zhop * -1} F900                                                     ; lower Z back down without priming (just in case we are testing the macro with cold hotend)
        {% endif %}  
        RESTORE_GCODE_STATE NAME=PAUSEPARK2 MOVE=1 MOVE_SPEED=150                           
        RESTORE_GCODE_STATE NAME=PAUSE MOVE=1 MOVE_SPEED=10                          ; restore position
        BASE_RESUME                                                                  ; resume print
    {% endif %}

#########################
########Park commands####
#########################

# Park at center of build volume
[gcode_macro PARKCENTER]
gcode:
    {% if "xyz" not in printer.toolhead.homed_axes %}
        G28                           ; home if not already homed
    {% endif %}
    SAVE_GCODE_STATE NAME=PARKCENTER
    G90                               ; absolute positioning
    G0 X{printer.toolhead.axis_maximum.x/2} Y{printer.toolhead.axis_maximum.y/2} Z{printer.toolhead.axis_maximum.z/2} F6000    
    RESTORE_GCODE_STATE NAME=PARKCENTER

# Park 15mm above center of bed
[gcode_macro PARKBED]
gcode:
    {% if "xyz" not in printer.toolhead.homed_axes %}
        G28                           ; home if not already homed
    {% endif %}
    SAVE_GCODE_STATE NAME=PARKBED
    G90                                ; absolute positioning
    G0 X{printer.toolhead.axis_maximum.x/2} Y{printer.toolhead.axis_maximum.y/2} Z15 F6000                                     
    RESTORE_GCODE_STATE NAME=PARKBED

###################################
#########Case light control#########
####################################

[gcode_macro CASELIGHT_ON]
description: Helper: Light on
gcode:
  SET_PIN PIN=caselight VALUE=1.0
  {action_respond_info("Caselight on")}
    
[gcode_macro CASELIGHT_OFF]
description: Helper: Light off
gcode:
  SET_PIN PIN=caselight VALUE=0.0
  {action_respond_info("Caselight off")}





#################################################################
#########          QIDI's Macros      #####################
############################################################



[gcode_macro HOT_CALIBRATE_START]
variable_k: 0
gcode:
    {% if k == 0 %}
        {% if printer['heater_generic hot'].temperature > 44 %}
            SET_GCODE_VARIABLE MACRO=HOT_CALIBRATE_END VARIABLE=hot_set VALUE=1
            SET_GCODE_OFFSET Z_ADJUST=-0.10 MOVE=0
            SET_GCODE_VARIABLE MACRO=HOT_CALIBRATE_START VARIABLE=k VALUE=1
        {% endif %}
    {% endif %}


[gcode_macro HOT_CALIBRATE_END]
variable_hot_set: 0
gcode:
    {% if  hot_set == 1 %}
        SET_GCODE_VARIABLE MACRO=HOT_CALIBRATE_END VARIABLE=hot_set VALUE=0
        SET_GCODE_OFFSET Z_ADJUST=+0.10 MOVE=0
        SET_GCODE_VARIABLE MACRO=HOT_CALIBRATE_START VARIABLE=k VALUE=0
    {% endif %}

[delayed_gcode KINEMATIC_POSITION]
initial_duration:0.2
gcode:
    SET_KINEMATIC_POSITION X=150
    SET_KINEMATIC_POSITION Y=150
	SET_KINEMATIC_POSITION Z=150

[gcode_macro PRINT_START]
gcode:
    HOT_CALIBRATE_START

[gcode_macro PRINT_START_QD]
gcode:
    HOT_CALIBRATE_START


[gcode_macro PRINT_END2]
gcode:
    M106 P2 S0
    M106 P0 S0
    M106 P3 S0  #关闭活性炭风扇
    
    M104 S0
    M140 S0
    M141 S0

    M220 S100
    M221 S100

    SET_IDLE_TIMEOUT TIMEOUT={printer.configfile.settings.idle_timeout.timeout} ; set timeout back to configured value
    CLEAR_PAUSE
    HOT_CALIBRATE_END

    SET_STEPPER_ENABLE STEPPER=stepper_x enable=0
	SET_STEPPER_ENABLE STEPPER=stepper_y enable=0
	SET_STEPPER_ENABLE STEPPER=stepper_z enable=1
	SET_STEPPER_ENABLE STEPPER=extruder enable=0

    BED_MESH_CLEAR      #恢复调平数据
    BED_MESH_PROFILE LOAD=default
    G31
    BEEP I=2 DUR=500


[gcode_macro PRINT_END_POWEROFF]
gcode:
       M107
       M104 S0
       M140 S0
       G28 Z
       M84
#       BEEP I=2 DUR=500
       M81	


#[gcode_macro M141]
#gcode:
      #SET_HEATER_TEMPERATURE HEATER=hot TARGET={params.S}


    


[gcode_macro M303]
gcode:
    {% if params.E is defined %}
     {% if params.S is defined %}
        {% if (params.E|int)==-1 %} 
         PID_CALIBRATE HEATER=heater_bed TARGET={params.S|int}
        {% endif %}
        {% if (params.E|int)==0 %}
         PID_CALIBRATE HEATER=extruder TARGET={params.S|int}
        {% endif %}
     {% endif %}
  {% endif %}

#############################################
#Screen#
#################################

[gcode_macro M603]
description: filament unlode
gcode:
    G92 E0
    G0  E15 F400
    G4  P1000
    G92 E0
    G1  E-80 F800

[gcode_macro M4029]
gcode:
    BED_MESH_CLEAR
    G91 
    G1 Z10 F600
    G90
    G28
    G1 X{printer.toolhead.axis_maximum.x/2 - printer.probe["x_offset"]} Y{printer.toolhead.axis_maximum.y/2 - printer.probe["y_offset"]} F7800
    G1 Z15 F600
    ABORT
    PROBE_CALIBRATE
    ABORT
    G0 Z0


[gcode_macro M109]
rename_existing: M99109
gcode:
    #Parameters
    {% set s = params.S|float %}
    
    M104 {% for p in params %}{'%s%s' % (p, params[p])}{% endfor %}  ; Set hotend temp
    {% if s != 0 %}
        TEMPERATURE_WAIT SENSOR=extruder MINIMUM={s} MAXIMUM={s+1}   ; Wait for hotend temp (within 1 degree)
    {% endif %}

[gcode_macro BEEP]
gcode:
    # Parameters
    {% set i = params.I|default(1)|int %}        ; Iterations (number of times to beep).
    {% set dur = params.DUR|default(100)|int %}  ; Duration/wait of each beep in ms. Default 100ms.

    {% if printer["output_pin sound"].value|int == 1 %}
        {% for iteration in range(i|int) %}
            SET_PIN PIN=beeper VALUE=1
            G4 P{dur}
            SET_PIN PIN=beeper VALUE=0
    		G4 P{dur}
        {% endfor %}
    {% endif %}

#[gcode_macro _CG28]
#gcode:
#    {% if "xyz" not in printer.toolhead.homed_axes %}
#        G28
#    {% endif %}



[gcode_macro G30]
gcode:
    BED_MESH_CLEAR      #清除调平数据
#    G28 
    BED_MESH_CALIBRATE mesh_min=10,10  mesh_max=310,310  METHOD=manual #手动动调平

[gcode_macro M106]
gcode:
    {% if params.P is defined %}
      {% if params.S is defined %}
        SET_PIN PIN=fan{params.P|int} VALUE={params.S|int}
      {% else %}
        SET_PIN PIN=fan{params.P|int} VALUE=255
      {% endif %}
    {% endif %} 

    {% if params.T is defined %}
        {% if (params.T|int)==-2 %}
          {% if params.S is defined %}       
            SET_PIN PIN=fan3 VALUE={params.S|int}
          {% else %}
            SET_PIN PIN=fan3 VALUE=255
          {% endif %}
        {% endif %}
    {% endif %}

    {% if params.P is undefined %}
    {% if params.T is undefined %}
    {% if params.S is defined %}
            SET_PIN PIN=fan0 VALUE={params.S|int}
       {% else %}
            SET_PIN PIN=fan0 VALUE=255       
    {% endif %}
    {% endif %}
    {% endif %}

[gcode_macro M107]
gcode:  
    SET_PIN PIN=fan0 VALUE=0 
#    SET_PIN PIN=fan1 VALUE=0
#    SET_PIN PIN=fan2 VALUE=0 

[gcode_macro M8029]
gcode:
     {% if params.D is defined %}
       {% if (params.D|int)==1 %} 
        SET_FILAMENT_SENSOR SENSOR=fila  ENABLE=1
       {% endif %}
       {% if (params.D|int)==0 %} 
        SET_FILAMENT_SENSOR SENSOR=fila  ENABLE=0
       {% endif %}
     {% endif %}

[gcode_macro M900]
gcode:
    {% if params.K is defined %} 
          SET_PRESSURE_ADVANCE ADVANCE={params.K}
    {% endif %}  
    {% if params.T is defined %}    
       SET_PRESSURE_ADVANCE SMOOTH_TIME={params.T}
    {% endif %} 

[gcode_macro M204]
rename_existing: M99204
gcode:
    {% if params.S is defined %}
        {% set s = params.S|float %}
    {% endif %}
    {% if params.P is defined %}
    {% if params.T is defined %}
        {% set s = [params.P|float ,params.T|float] | min %}
    {% endif %}
    {% endif %}

    SET_VELOCITY_LIMIT ACCEL={s}
    SET_VELOCITY_LIMIT ACCEL_TO_DECEL={s/2}


[gcode_macro M290]
gcode:
   SET_GCODE_OFFSET Z_ADJUST={params.Z}

[gcode_macro M901]
gcode:
    G28
    SHAPER_CALIBRATE

#[gcode_macro M81]
#description: PowerOff
#gcode: 
 #M84
 #SET_PIN PIN=pwc VALUE=0



       
[gcode_macro M0]
gcode:
    PAUSE

[gcode_macro M25]
rename_existing: M9925
gcode:
    PAUSE


    
[output_pin sound]
pin: PA13
value:1


[gcode_macro beep_on]
gcode:
    SET_PIN PIN=sound VALUE=1
    
[gcode_macro beep_off]
gcode:
    SET_PIN PIN=sound VALUE=0






     






