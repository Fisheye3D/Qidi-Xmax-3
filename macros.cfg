
##############################################################################
                     ##     My add'd Macros     ##
##############################################################################

##############################################################################
                    ## Print Start Macros ##
##############################################################################



[gcode_macro PRINT_START_PLA]
description: Start G-Code
gcode:
  {% set BED_TEMP = params.BED_TEMP|default(60)|float %}
  {% set EXTRUDER_TEMP = params.EXTRUDER_TEMP|default(210)|float %}
#start heating bed and wait
  M140 S{BED_TEMP}
  M190 S{BED_TEMP}
#use absolute coordinates
  G28
  G28 Z 
  BED_MESH_CALIRBRATE #need for Kamp or else default
  #BED_MESH_PROFILE LOAD=default
  G0 X4 Y5 Z50 F6000
  M109 S{extruder_temp}
  M82
  G0 Z0.3 F600
  G92 E-36.45
  G1 Y120 E-27.45 F3000
  G1 X6 E-27.30
  G1 Y5 E-18.30
  G1 X8 E-18.15
  G1 Y120 E-9.15
  G1 X10 E-9
  G1 Y5 E0

[gcode_macro PRINT_END]
gcode:
  M106 P2 S0
  M106 P0 S0
  M106 P3 S0  #关闭活性炭风扇
    
  M104 S0
  M140 S0
  M141 S0

  M220 S100
  M221 S100
  
  G92 E0
  G1 E-3 F1800
  G91
  G0 Z10 F600
  G90
  G0 X0 Y0 F12000
  G0 Z[printable_height] F600
      
  SET_IDLE_TIMEOUT TIMEOUT={printer.configfile.settings.idle_timeout.timeout} ; set timeout back to configured value
  CLEAR_PAUSE
  HOT_CALIBRATE_END

  SET_STEPPER_ENABLE STEPPER=stepper_x enable=0
  SET_STEPPER_ENABLE STEPPER=stepper_y enable=0
  SET_STEPPER_ENABLE STEPPER=stepper_z enable=1
  SET_STEPPER_ENABLE STEPPER=extruder enable=0

  BED_MESH_CLEAR      #恢复调平数据
  BED_MESH_PROFILE LOAD=default
  G31
  BEEP I=2 DUR=500

########################################
#   CHamber heater/exhaust   #
#########################################

[gcode_macro M141]
gcode:
    {% set s = params.S|default(0)|float %}
    SET_TEMPERATURE_FAN_TARGET temperature_fan="chamber" target={s}
    SET_HEATER_TEMPERATURE HEATER=hot TARGET={params.S}
    TEMPERATURE_WAIT SENSOR=hot

########################################
#   Pressure advance/square corner   #
#########################################


[gcode_macro M900_Pressure_advance] #Qidi Gcode for PA
gcode:
  gcode:
    {% if params.K is defined %} 
          SET_PRESSURE_ADVANCE ADVANCE={params.K}
    {% endif %}  
    {% if params.T is defined %}    
       SET_PRESSURE_ADVANCE SMOOTH_TIME={params.T}
    {% endif %} 


[gcode_macro M205_Square_corner_velocity]
gcode:
  {% if 'X' in params %}
    SET_VELOCITY_LIMIT SQUARE_CORNER_VELOCITY={params.X}
  {% elif 'Y' in params %}
    SET_VELOCITY_LIMIT SQUARE_CORNER_VELOCITY={params.Y}
  {% endif %}


[gcode_macro M204] #desuu macro 
rename_existing: M204.1
gcode:
  #{% set f = printer.configfile.settings.printer.max_accel_to_decel %} #DEFAULT 0.85 = 85 PERCENT OF SET ACCELERATION VIA SLICER FOR ACCEL TO DECEL 
  {% if 'S' in params %}
  {% set s = params.S|float %} #
  SET_VELOCITY_LIMIT ACCEL={s} #ACCEL_TO_DECEL={f}
  {% else %}
  {% if 'P' in params %}
  {% set p = params.P|float %}
  {% if 'T' in params %}
  {% set t = params.T|float %}
  {% if p < t %}
  SET_VELOCITY_LIMIT ACCEL={p} #ACCEL_TO_DECEL={f}
  {% else %}
  SET_VELOCITY_LIMIT ACCEL={t} #ACCEL_TO_DECEL={f}
  {% endif %}
  {% else %}
  SET_VELOCITY_LIMIT ACCEL={p} #ACCEL_TO_DECEL={f}
  {% endif %}
  {% elif 'T' in params %}
  {% set t = params.T|float %}
  SET_VELOCITY_LIMIT ACCEL={t} #ACCEL_TO_DECEL={f}
    {% endif %}
  {% endif %}

##################################################################
###  Automatic ressonacne test and belt test  ssh in for graph ###
#################################################################

[gcode_macro RESONANCES_TEST]
description: Run input shaper test
gcode:
  {% set user = printer['gcode_macro _USER_VARIABLE'] %}
  _CG28                                                 ; home if needed
  TURN_OFF_HEATERS                                      ; turn off heaters
  M107                                                  ; turn off fan
  {% if user.hw.chamber.fan %} M141 {% endif %}         ; exhaust fan off
  {% if user.hw.filter.ena %} _SET_FILTER {% endif %}   ; filter off
  _PRINT_AR T="INPUT SHAPER: Noise values, check if sensor is installed"
  MEASURE_AXES_NOISE                                    ; get noise value in log
  _PRINT_AR T="INPUT SHAPER: Resonance Tests starting"
  _PRINT_AR T="INPUT SHAPER: Mesasure X axis"
  TEST_RESONANCES AXIS=X                                ; measure X
  _PRINT_AR T="INPUT SHAPER: Mesasure Y axis"
  TEST_RESONANCES AXIS=Y                                ; measure Y
  _PRINT_AR T="INPUT SHAPER: Resonance Tests done"
  _PRINT_AR T="INPUT SHAPER: Generate graph in backround"
  RUN_SHELL_COMMAND CMD=plot_graph PARAMS=SHAPER

[gcode_macro BELT_TEST]
description: Run resonance test to analyze belts
gcode:
  {% set user = printer['gcode_macro _USER_VARIABLE'] %}
  _CG28                                                 ; home if needed
  TURN_OFF_HEATERS                                      ; turn off heaters
  M107                                                  ; turn off fan
  {% if user.hw.chamber.fan %} M141 {% endif %}         ; exhaust fan off
  {% if user.hw.filter.ena %} _SET_FILTER {% endif %}   ; filter off
  _PRINT_AR T="BELT TEST: Noise values, check if sensor is installed"
  MEASURE_AXES_NOISE                                    ; get noise value in log
  _PRINT_AR T="BELT TEST: Resonance Tests starting ..."
  _PRINT_AR T="BELT TEST: Mesasure B belt"
  TEST_RESONANCES AXIS=1,1 OUTPUT=raw_data NAME=b
  _PRINT_AR T="BELT TEST: Mesasure A belt"
  TEST_RESONANCES AXIS=1,-1 OUTPUT=raw_data NAME=a
  _PRINT_AR T="BELT TEST: Resonance Tests done"
  _PRINT_AR T="BELT TEST: Generate graph in backround"
  RUN_SHELL_COMMAND CMD=plot_graph PARAMS=BELT

[gcode_shell_command plot_graph]
command: bash /home/pi/klipper_config/script/plot_graph.sh
timeout: 60.0
verbose: True

##################################
#  Firmware retraction #
##################################


[firmware_retraction]
retract_length: 1 ; length of filament (in mm) at G10/G11
unretract_extra_length: 0 ; length of additional filament (in mm) at G11
retract_speed: 30
unretract_speed: 30

##################################
# To disable X/Y motor bed adjust #
###################################
[gcode_macro disable_X_Y_bed_screw_adjust]
description: disable X/Y motors to adjust screws on bed for flatness
gcode:
  SET_STEPPER_ENABLE STEPPER=extruder ENABLE=0
  SET_STEPPER_ENABLE STEPPER=stepper_x ENABLE=0
  SET_STEPPER_ENABLE STEPPER=stepper_y ENABLE=0


##################################
########PID TUNE################
###############################


[gcode_macro PID_BED_65]
description: Start Bed PID 
  
gcode:
  {% if printer.idle_timeout.state == "Printing" %}
  RESPOND TYPE=error MSG="This macro cannot be used while printing!"
  {% else %}
  {% if printer.toolhead.homed_axes != "xyz" %}
  G28
  status_heating
  {% endif %}
  M106
  G1 Z50 F1500
  RESPOND MSG="Bed PID in progress..."
  PID_CALIBRATE HEATER=heater_bed TARGET={params.TEMP|default(65)}
  G28
  SAVE_CONFIG
  {% endif %}

[gcode_macro PID_HOTEND_220]
description: Start Hotend PID
gcode:
  {% if printer.idle_timeout.state == "Printing" %}
  RESPOND TYPE=error MSG="This macro cannot be used while printing!"
  {% else %}
  {% if printer.toolhead.homed_axes != "xyz" %}
  G28
  status_heating
  {% endif %}
  M106
  G1 Z50 F1500
  RESPOND MSG="Hotend PID in progress..."
  PID_CALIBRATE HEATER=extruder TARGET={params.TEMP|default(220)}
  G28
  SAVE_CONFIG
  {% endif %}

###############################################
##########cancel object####################
###########################################

[gcode_macro M486]
gcode:
  # Parameters known to M486 are as follows:
  #   [C<flag>] Cancel the current object
  #   [P<index>] Cancel the object with the given index
  #   [S<index>] Set the index of the current object.
  #       If the object with the given index has been canceled, this will cause
  #       the firmware to skip to the next object. The value -1 is used to
  #       indicate something that isn’t an object and shouldn’t be skipped.
  #   [T<count>] Reset the state and set the number of objects
  #   [U<index>] Un-cancel the object with the given index. This command will be
  #       ignored if the object has already been skipped
  {% if 'exclude_object' not in printer %}
    {action_raise_error("[exclude_object] is not enabled")}
  {% endif %}

  {% if 'T' in params %}
    EXCLUDE_OBJECT RESET=1

    {% for i in range(params.T | int) %}
      EXCLUDE_OBJECT_DEFINE NAME={i}
    {% endfor %}
  {% endif %}

  {% if 'C' in params %}
    EXCLUDE_OBJECT CURRENT=1
  {% endif %}

  {% if 'P' in params %}
    EXCLUDE_OBJECT NAME={params.P}
  {% endif %}

  {% if 'S' in params %}
    {% if params.S == '-1' %}
      {% if printer.exclude_object.current_object %}
        EXCLUDE_OBJECT_END NAME={printer.exclude_object.current_object}
      {% endif %}
    {% else %}
      EXCLUDE_OBJECT_START NAME={params.S}
    {% endif %}
  {% endif %}

  {% if 'U' in params %}
    EXCLUDE_OBJECT RESET=1 NAME={params.U}
  {% endif %}


#############################
# Load/Unload Pause/resume  #
#############################

[gcode_macro UNLOAD_FILAMENT]
description: Unloads the filament. Note: be careful with PETG, make sure you inspect the tip of your filament before reloading to avoid jams.
gcode:
  SAVE_GCODE_STATE NAME=unload_state
  G91
  {% if params.TEMP is defined or printer.extruder.can_extrude|lower == 'false' %}
    M117 Heating...
    # Heat up hotend to provided temp or 220 as default as that should work OK with most filaments.
    M104 S{params.TEMP|default(220, true)}
    TEMPERATURE_WAIT SENSOR=extruder MINIMUM={params.TEMP|default(220, true)}
  {% endif %}
  M117 Unloading filament...
  # Extract filament to cold end area 
  G0 E-5 F3600
  # Wait for three seconds
  G4 P3000
  # Push back the filament to smash any stringing 
  G0 E5 F3600
  # Extract back fast in to the cold zone 
  G0 E-15 F3600
  # Continue extraction slowly, allow the filament time to cool solid before it reaches the gears       
  G0 E-130 F300
  M117 Filament unloaded!
  RESPOND MSG="Filament unloaded! Please inspect the tip of the filament before reloading."
  RESTORE_GCODE_STATE NAME=unload_state


[gcode_macro LOAD_FILAMENT]
description: Loads new filament. Note: be careful with PETG, make sure you inspect the tip of your filament before loading to avoid jams.
gcode:
  SAVE_GCODE_STATE NAME=load_state
  G91
  # Heat up hotend to provided temp or 220 as default as that should work OK with most filaments.
  {% if params.TEMP is defined or printer.extruder.can_extrude|lower == 'false' %}
    M117 Heating...
    M104 S{params.TEMP|default(220, true)}
    TEMPERATURE_WAIT SENSOR=extruder MINIMUM={params.TEMP|default(220, true)}
  {% endif %}
  M117 Loading filament...
  # Load the filament into the hotend area.
  G0 E100 F600
  # Wait a secod
  G4 P1000
  # Purge
  G0 E40 F100
  # Wait for purge to complete
  M400e
  M117 Filament loaded!
  RESPOND MSG="Filament loaded!"
  RESTORE_GCODE_STATE NAME=load_state

[gcode_macro PAUSE]
description: Pause the actual running print
rename_existing: PAUSE_BASE
gcode:
  PAUSE_BASE
  _TOOLHEAD_PARK_PAUSE_CANCEL
  

[gcode_macro _TOOLHEAD_PARK_PAUSE_CANCEL]
description: Helper: park toolhead used in PAUSE and CANCEL_PRINT
variable_extrude: 1.0
gcode:
  ##### set park positon for x and y #####
  # default is your max posion from your printer.cfg
  {% set x_park = printer.toolhead.axis_maximum.x|float - 5.0 %}
  {% set y_park = printer.toolhead.axis_maximum.y|float - 5.0 %}
  {% set z_park_delta = 2.0 %}
  ##### calculate save lift position #####
  {% set max_z = printer.toolhead.axis_maximum.z|float %}
  {% set act_z = printer.toolhead.position.z|float %}
  {% if act_z < (max_z - z_park_delta) %}
    {% set z_safe = z_park_delta %}
  {% else %}
    {% set z_safe = max_z - act_z %}
  {% endif %}
  ##### end of definitions #####
  {% if printer.extruder.can_extrude|lower == 'true' %}
    M83
    G1 E-{extrude} F2100
    {% if printer.gcode_move.absolute_extrude |lower == 'true' %} M82 {% endif %}
  {% else %}
    {action_respond_info("Extruder not hot enough")}
  {% endif %}
  {% if "xyz" in printer.toolhead.homed_axes %}
    G91
    G1 Z{z_safe} F900
    G90
    G1 X{x_park} Y{y_park} F6000
    {% if printer.gcode_move.absolute_coordinates|lower == 'false' %} G91 {% endif %}
  {% else %}
    {action_respond_info("Printer not homed")}
  {% endif %}

[gcode_macro RESUME]
description: Resume the actual running print
rename_existing: RESUME_BASE
gcode:
  ##### read extrude from  _TOOLHEAD_PARK_PAUSE_CANCEL  macro #####
  {% set extrude = printer['gcode_macro _TOOLHEAD_PARK_PAUSE_CANCEL'].extrude %}
  #### get VELOCITY parameter if specified ####
  {% if 'VELOCITY' in params|upper %}
    {% set get_params = ('VELOCITY=' + params.VELOCITY)  %}
  {%else %}
    {% set get_params = "" %}
  {% endif %}
  ##### end of definitions #####
  {% if printer.extruder.can_extrude|lower == 'true' %}
    M83
    G1 E{extrude} F2100
    {% if printer.gcode_move.absolute_extrude |lower == 'true' %} M82 {% endif %}
  {% else %}
    {action_respond_info("Extruder not hot enough")}
  {% endif %}  
  RESUME_BASE {get_params}

[gcode_macro CANCEL_PRINT]
description: Cancel the actual running print
rename_existing: CANCEL_PRINT_BASE
variable_park: True
gcode:
  ## Move head and retract only if not already in the pause state and park set to true
  {% if printer.pause_resume.is_paused|lower == 'false' and park|lower == 'true'%}
    _TOOLHEAD_PARK_PAUSE_CANCEL
  {% endif %}
  TURN_OFF_HEATERS
  CANCEL_PRINT_BASE
  SDCARD_RESET_FILE
    
   

[gcode_macro PAUSE]
description: Pause the actual running print
rename_existing: PAUSE_BASE
gcode:
  PAUSE_BASE
  _TOOLHEAD_PARK_PAUSE_CANCEL

[gcode_macro M600]
########### Gcode ############
gcode:
  {% set X = params.X|default(printer.configfile.config["stepper_x"]["position_endstop"]|string)|int %}
  {% set Y = params.Y|default(printer.configfile.config["stepper_y"]["position_endstop"]|string)|int %}
  {% set Z = params.Z|default(10)|int %}
  {% set E = params.E|default(-20)|int %}
  {% set tool = params.tool|default(0)|int %}

        SAVE_GCODE_STATE NAME=M600_state
        PAUSE
        G91
        G1 E-5 F4000
        G1 Z{Z}
        G90
        G1 X{X} Y{Y} F3000        ;park position
        G0 E10 F500                ;extrude filament to get better blob on end
        G0 E{E} F600             ;retract additional filament to move out of melt zone
        G92 E0
        SET_FILAMENT_SENSOR SENSOR=e{TOOL}_runout ENABLE=0

[gcode_macro SWAP_RESUME] 
gcode:
    RESTORE_GCODE_STATE NAME=M600_state
    SET_FILAMENT_SENSOR SENSOR=e0_runout ENABLE=1
    SET_FILAMENT_SENSOR SENSOR=e1_runout ENABLE=1


#[gcode_macro PAUSE]
#rename_existing: BASE_PAUSE
#gcode:
    #-- Parameters
    #{% set z = params.Z|default(50)|int %}                                                   ; z hop amount
    
    #{% if printer['pause_resume'].is_paused|int == 0 %}     
       #SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=zhop VALUE={z}                              ; set z hop variable for reference in resume macro
        #SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=etemp VALUE={printer['extruder'].target}    ; set hotend temp variable for reference in resume macro
                                
#      -- SET_FILAMENT_SENSOR SENSOR=fila ENABLE=0                                             ; disable filament sensor       
        #SAVE_GCODE_STATE NAME=PAUSE                                                          ; save current print position for resume                
        #BASE_PAUSE                                                                           ; pause print
        #{% if (printer.gcode_move.position.z + z) < printer.toolhead.axis_maximum.z %}       ; check that zhop doesn't exceed z max
            #G91                                                                              ; relative positioning
            #G1 Z{z} F600                                                                     ; raise Z up by z hop amount
        #{% else %}
#        --    { action_respond_info("Pause zhop exceeds maximum Z height.") }                  ; if z max is exceeded, show message and set zhop value for resume to 0
            #SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=zhop VALUE=0
        #{% endif %}
        #SAVE_GCODE_STATE NAME=PAUSEPARK2
        #G90                                                                                  ; absolute positioning
        #G1 X{printer.toolhead.axis_maximum.x/2} Y{printer.toolhead.axis_maximum.y} F6000   ; park toolhead at front center
        #SAVE_GCODE_STATE NAME=PAUSEPARK                                                      ; save parked position in case toolhead is moved during the pause (otherwise the return zhop can error) 
        #M104 S0                                                                              ; turn off hotend
        #SET_IDLE_TIMEOUT TIMEOUT=43200                                                       ; set timeout to 12 hours
    #{% endif %}


#[gcode_macro RESUME]
#rename_existing: BASE_RESUME
#variable_zhop: 0
#variable_etemp: 0
#gcode:
    # Parameters
    #{% set e = params.E|default(2.5)|int %}                                          ; hotend prime amount (in mm)
    
    #{% if printer['pause_resume'].is_paused|int == 1 %}
#    --    SET_FILAMENT_SENSOR SENSOR=fila ENABLE=1                          ; enable filament sensor
        #--INITIAL_RGB                                                                    ; reset LCD color
        #SET_IDLE_TIMEOUT TIMEOUT={printer.configfile.settings.idle_timeout.timeout}  ; set timeout back to configured value
        #{% if etemp > 0 %}
            #M109 S{etemp|int}                                                        ; wait for hotend to heat back up
        #{% endif %}
        #RESTORE_GCODE_STATE NAME=PAUSEPARK MOVE=1 MOVE_SPEED=150                     ; go back to parked position in case toolhead was moved during pause (otherwise the return zhop can error)  
        #G91                                                                          ; relative positioning
        #M83                                                                          ; relative extruder positioning
        #{% if printer[printer.toolhead.extruder].temperature >= printer.configfile.settings.extruder.min_extrude_temp %}                                                
            #G1  E{e} F900                                                ; prime nozzle by E, lower Z back down
#        {% else %}                      
#            G1 Z{zhop * -1} F900                                                     ; lower Z back down without priming (just in case we are testing the macro with cold hotend)
        #{% endif %}  
        #RESTORE_GCODE_STATE NAME=PAUSEPARK2 MOVE=1 MOVE_SPEED=150                           
        #RESTORE_GCODE_STATE NAME=PAUSE MOVE=1 MOVE_SPEED=10                          ; restore position
        #BASE_RESUME                                                                  ; resume print
    #{% endif %}

#########################
########Park commands####
#########################

# Park at center of build volume
[gcode_macro PARKCENTER]
gcode:
    {% if "xyz" not in printer.toolhead.homed_axes %}
        G28                           ; home if not already homed
    {% endif %}
    SAVE_GCODE_STATE NAME=PARKCENTER
    G90                               ; absolute positioning
    G0 X{printer.toolhead.axis_maximum.x/2} Y{printer.toolhead.axis_maximum.y/2} Z{printer.toolhead.axis_maximum.z/2} F6000    
    RESTORE_GCODE_STATE NAME=PARKCENTER

# Park 15mm above center of bed
[gcode_macro PARKBED]
gcode:
    {% if "xyz" not in printer.toolhead.homed_axes %}
        G28                           ; home if not already homed
    {% endif %}
    SAVE_GCODE_STATE NAME=PARKBED
    G90                                ; absolute positioning
    G0 X{printer.toolhead.axis_maximum.x/2} Y{printer.toolhead.axis_maximum.y/2} Z15 F6000                                     
    RESTORE_GCODE_STATE NAME=PARKBED

###################################
#########Case light control#########
####################################

[gcode_macro CASELIGHT_ON]
description: Helper: Light on
gcode:
  SET_PIN PIN=caselight VALUE=1.0
  {action_respond_info("Caselight on")}
    
[gcode_macro CASELIGHT_OFF]
description: Helper: Light off
gcode:
  SET_PIN PIN=caselight VALUE=0.0
  {action_respond_info("Caselight off")}





#################################################################
#########          QIDI's Macros      #####################
############################################################



[gcode_macro HOT_CALIBRATE_START]
variable_k: 0
gcode:
    {% if k == 0 %}
        {% if printer['heater_generic hot'].temperature > 49 %}
            SET_GCODE_VARIABLE MACRO=HOT_CALIBRATE_END VARIABLE=hot_set VALUE=1
            SET_GCODE_OFFSET Z_ADJUST=-0.05 MOVE=0
            SET_GCODE_VARIABLE MACRO=HOT_CALIBRATE_START VARIABLE=k VALUE=1
        {% endif %}
    {% endif %}


[gcode_macro HOT_CALIBRATE_END]
variable_hot_set: 0
gcode:
    {% if  hot_set == 1 %}
        SET_GCODE_VARIABLE MACRO=HOT_CALIBRATE_END VARIABLE=hot_set VALUE=0
        SET_GCODE_OFFSET Z_ADJUST=+0.05 MOVE=0
        SET_GCODE_VARIABLE MACRO=HOT_CALIBRATE_START VARIABLE=k VALUE=0
    {% endif %}

[delayed_gcode KINEMATIC_POSITION]
initial_duration:0.2
gcode:
    SET_KINEMATIC_POSITION X=150
    SET_KINEMATIC_POSITION Y=150
	SET_KINEMATIC_POSITION Z=150

[gcode_macro PRINT_START]
gcode:
    HOT_CALIBRATE_START

[gcode_macro PRINT_START_QD]
gcode:
    HOT_CALIBRATE_START

#[gcode_macro CANCEL_PRINT]
#rename_existing: BASE_CANCEL_PRINT
#gcode:
   # {% if (printer.gcode_move.position.z) < 200 %}       ; check that zhop doesn't exceed z max
        #G1 Z200 F600                                         
    #{% endif %}
  
   # G1  X0 Y0 F12000

#SDCARD_RESET_FILE
    #PRINT_END
    #CANCEL_PRINT

[gcode_macro PRINT_END2]
gcode:
  M106 P2 S0
  M106 P0 S0
  M106 P3 S0  #关闭活性炭风扇
    
  M104 S0
  M140 S0
  M141 S0

  M220 S100
  M221 S100
  
  SET_IDLE_TIMEOUT TIMEOUT={printer.configfile.settings.idle_timeout.timeout} ; set timeout back to configured value
  CLEAR_PAUSE
  HOT_CALIBRATE_END

  SET_STEPPER_ENABLE STEPPER=stepper_x enable=0
  SET_STEPPER_ENABLE STEPPER=stepper_y enable=0
  SET_STEPPER_ENABLE STEPPER=stepper_z enable=1
  SET_STEPPER_ENABLE STEPPER=extruder enable=0

  BED_MESH_CLEAR      #恢复调平数据
  BED_MESH_PROFILE LOAD=default
  G31
  BEEP I=2 DUR=500


[gcode_macro PRINT_END_POWEROFF]
gcode:
       M107
       M104 S0
       M140 S0
       G28 Z
       M84
#       BEEP I=2 DUR=500
       M81	


#[gcode_macro M141]
#gcode:
      #SET_HEATER_TEMPERATURE HEATER=hot TARGET={params.S}


    


#[gcode_macro M303]
#gcode:
    #{% if params.E is defined %}
     #{% if params.S is defined %}
       # {% if (params.E|int)==-1 %} 
         #PID_CALIBRATE HEATER=heater_bed TARGET={params.S|int}
        #{% endif %}
        #{% if (params.E|int)==0 %}
        # PID_CALIBRATE HEATER=extruder TARGET={params.S|int}
        #{% endif %}
     #{% endif %}
  #{% endif %}



     






